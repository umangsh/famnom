# Generated by Django 4.0.1 on 2022-01-28 19:11

import datetime
import uuid

import bitfield.models
import django.contrib.postgres.indexes
import django.contrib.postgres.search
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.contrib.postgres.operations import BtreeGinExtension, TrigramExtension, UnaccentExtension
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        BtreeGinExtension(),
        TrigramExtension(),
        UnaccentExtension(),
        migrations.CreateModel(
            name="DBBrandedFood",
            fields=[
                ("created_timestamp", models.DateTimeField(auto_now_add=True)),
                ("updated_timestamp", models.DateTimeField(auto_now=True)),
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                (
                    "brand_owner",
                    models.TextField(
                        blank=True, help_text="Brand owner for the food.", null=True, verbose_name="brand_owner"
                    ),
                ),
                (
                    "brand_name",
                    models.TextField(
                        blank=True, help_text="Brand name for the food.", null=True, verbose_name="brand_name"
                    ),
                ),
                (
                    "subbrand_name",
                    models.TextField(
                        blank=True, help_text="Sub-brand name for the food.", null=True, verbose_name="subbrand_name"
                    ),
                ),
                (
                    "gtin_upc",
                    models.CharField(
                        blank=True,
                        help_text="GTIN or UPC code identifying the food.",
                        max_length=20,
                        null=True,
                        verbose_name="gtin_upc",
                    ),
                ),
                (
                    "ingredients",
                    models.TextField(
                        blank=True,
                        help_text="The list of ingredients (as it appears on the product label).",
                        null=True,
                        verbose_name="ingredients",
                    ),
                ),
                (
                    "not_a_significant_source_of",
                    models.TextField(blank=True, null=True, verbose_name="not_a_significant_source_of"),
                ),
            ],
            options={
                "db_table": "db_branded_food",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="DBFood",
            fields=[
                ("created_timestamp", models.DateTimeField(auto_now_add=True)),
                ("updated_timestamp", models.DateTimeField(auto_now=True)),
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("external_id", models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                (
                    "source_id",
                    models.PositiveBigIntegerField(
                        blank=True,
                        help_text="Unique permanent identifier of a food in source dataset.For e.g. fdc_id for USDA Foods.",
                        null=True,
                        verbose_name="source_id",
                    ),
                ),
                (
                    "source_type",
                    models.PositiveSmallIntegerField(
                        choices=[(0, "Unknown"), (1, "USDA"), (2, "User Generated Foods")],
                        default=0,
                        help_text="Food source type.",
                        verbose_name="source_type",
                    ),
                ),
                (
                    "source_sub_type",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (0, "Unknown"),
                            (1, "USDA Foundation Food"),
                            (2, "USDA SR Legacy Food"),
                            (3, "USDA Survey FNDDS Food"),
                            (4, "USDA Branded Food"),
                            (9999, "Other"),
                        ],
                        default=0,
                        help_text="Food source sub type.",
                        verbose_name="source_sub_type",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of the food.", null=True, verbose_name="description"
                    ),
                ),
                (
                    "food_category_id",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Id of the food category the food belongs to.",
                        null=True,
                        verbose_name="food_category_id",
                    ),
                ),
            ],
            options={
                "db_table": "db_food",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="DBFoodNutrient",
            fields=[
                ("created_timestamp", models.DateTimeField(auto_now_add=True)),
                ("updated_timestamp", models.DateTimeField(auto_now=True)),
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                (
                    "source_id",
                    models.PositiveBigIntegerField(
                        blank=True,
                        help_text="Unique permanent identifier of the row in source dataset.For e.g. id for USDA Food Nutrients.",
                        null=True,
                        verbose_name="source_id",
                    ),
                ),
                (
                    "source_type",
                    models.PositiveSmallIntegerField(
                        choices=[(0, "Unknown"), (1, "USDA"), (2, "User Generated Foods")],
                        default=0,
                        help_text="Food source type.",
                        verbose_name="source_type",
                    ),
                ),
                (
                    "nutrient_id",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="ID of the nutrient to which the food nutrient pertains.",
                        null=True,
                        verbose_name="nutrient_id",
                    ),
                ),
                (
                    "amount",
                    models.FloatField(
                        blank=True,
                        help_text="Amount of the nutrient per 100g of food. Specified in unit defined in the nutrient table.",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0.0)],
                        verbose_name="amount",
                    ),
                ),
            ],
            options={
                "db_table": "db_food_nutrient",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="DBFoodPortion",
            fields=[
                ("created_timestamp", models.DateTimeField(auto_now_add=True)),
                ("updated_timestamp", models.DateTimeField(auto_now=True)),
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                (
                    "source_id",
                    models.PositiveBigIntegerField(
                        blank=True,
                        help_text="Unique (per food) permanent identifier of the row in source dataset. For e.g. id for USDA Food Portions.",
                        null=True,
                        verbose_name="source_id",
                    ),
                ),
                (
                    "source_type",
                    models.PositiveSmallIntegerField(
                        choices=[(0, "Unknown"), (1, "USDA"), (2, "User Generated Foods")],
                        default=0,
                        help_text="Food source type.",
                        verbose_name="source_type",
                    ),
                ),
                ("external_id", models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                (
                    "servings_per_container",
                    models.FloatField(
                        blank=True,
                        help_text="The number of servings per container.",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0.0)],
                        verbose_name="servings_per_container",
                    ),
                ),
                (
                    "serving_size",
                    models.FloatField(
                        blank=True,
                        help_text="The amount of the serving size when expressed as gram or ml.",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0.0)],
                        verbose_name="serving_size",
                    ),
                ),
                (
                    "serving_size_unit",
                    models.CharField(
                        blank=True,
                        help_text="The unit used to express the serving size (gram or ml).",
                        max_length=25,
                        null=True,
                        verbose_name="serving_size_unit",
                    ),
                ),
                (
                    "quantity",
                    models.FloatField(
                        blank=True,
                        help_text="The quantity of portions used as specified by the user.",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0.0)],
                        verbose_name="quantity",
                    ),
                ),
                (
                    "amount",
                    models.FloatField(
                        blank=True,
                        help_text="The number of measure units that comprise the measure (e.g. if measure is 3 tsp, the amount is 3).",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0.0)],
                        verbose_name="amount",
                    ),
                ),
                (
                    "measure_unit_id",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="The unit used for the measure (e.g. if measure is 3 tsp, the unit is tsp).",
                        null=True,
                        verbose_name="measure_unit_id",
                    ),
                ),
                (
                    "portion_description",
                    models.TextField(
                        blank=True,
                        help_text="Foundation foods: Comments that provide more specificity on the measure. For example, for a pizza measure the dissemination text might be 1 slice is 1/8th of a 14 inch pizza. Survey (FNDDS) foods: The household description of the portion.",
                        null=True,
                        verbose_name="portion_description",
                    ),
                ),
                (
                    "modifier",
                    models.TextField(
                        blank=True,
                        help_text='Foundation foods: Qualifier of the measure (e.g. related to food shape or form) (e.g. melted, crushed, diced). Survey (FNDDS) foods: The portion code. SR legacy foods: description of measures, including the unit of measure and the measure modifier (e.g. waffle round (4" dia)).',
                        null=True,
                        verbose_name="modifier",
                    ),
                ),
            ],
            options={
                "db_table": "db_food_portion",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="SearchResult",
            fields=[
                ("created_timestamp", models.DateTimeField(auto_now_add=True)),
                ("updated_timestamp", models.DateTimeField(auto_now=True)),
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                (
                    "external_id",
                    models.UUIDField(
                        help_text="External ID of the indexed result.", unique=True, verbose_name="external_id"
                    ),
                ),
                (
                    "search_vector",
                    django.contrib.postgres.search.SearchVectorField(
                        blank=True,
                        editable=False,
                        help_text="Composite column to search on.",
                        null=True,
                        verbose_name="search_vector",
                    ),
                ),
                (
                    "name",
                    models.TextField(
                        blank=True, help_text="Name of the search result.", null=True, verbose_name="name"
                    ),
                ),
                (
                    "source_type",
                    models.PositiveSmallIntegerField(
                        choices=[(0, "Unknown"), (1, "USDA"), (2, "User Generated Foods")],
                        default=0,
                        help_text="Food source type.",
                        verbose_name="source_type",
                    ),
                ),
                (
                    "source_sub_type",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (0, "Unknown"),
                            (1, "USDA Foundation Food"),
                            (2, "USDA SR Legacy Food"),
                            (3, "USDA Survey FNDDS Food"),
                            (4, "USDA Branded Food"),
                            (9999, "Other"),
                        ],
                        default=0,
                        help_text="Food source sub type.",
                        verbose_name="source_sub_type",
                    ),
                ),
                (
                    "category_id",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Id of the food category the food belongs to.",
                        null=True,
                        verbose_name="food_category_id",
                    ),
                ),
                (
                    "brand_owner",
                    models.TextField(
                        blank=True, help_text="Brand owner for the food.", null=True, verbose_name="brand_owner"
                    ),
                ),
                (
                    "brand_name",
                    models.TextField(
                        blank=True, help_text="Brand name for the food.", null=True, verbose_name="brand_name"
                    ),
                ),
                (
                    "subbrand_name",
                    models.TextField(
                        blank=True, help_text="Sub-brand name for the food.", null=True, verbose_name="subbrand_name"
                    ),
                ),
                (
                    "gtin_upc",
                    models.CharField(
                        blank=True,
                        help_text="GTIN or UPC code identifying the food.",
                        max_length=20,
                        null=True,
                        verbose_name="gtin_upc",
                    ),
                ),
            ],
            options={
                "db_table": "gt_search_index",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="USDAFood",
            fields=[
                ("created_timestamp", models.DateTimeField(auto_now_add=True)),
                ("updated_timestamp", models.DateTimeField(auto_now=True)),
                ("external_id", models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                (
                    "fdc_id",
                    models.PositiveBigIntegerField(
                        help_text="Unique permanent USDA identifier of a food.",
                        primary_key=True,
                        serialize=False,
                        verbose_name="fdc_id",
                    ),
                ),
                (
                    "data_type",
                    models.CharField(
                        blank=True, help_text="Type of food data.", max_length=50, null=True, verbose_name="data_type"
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of the food.", null=True, verbose_name="description"
                    ),
                ),
                (
                    "food_category_id",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Id of the food category the food belongs to.",
                        null=True,
                        verbose_name="food_category_id",
                    ),
                ),
                (
                    "publication_date",
                    models.DateField(
                        blank=True,
                        help_text="Date when the food was published to FoodData Central.",
                        null=True,
                        verbose_name="publication_date",
                    ),
                ),
            ],
            options={
                "db_table": "usda_food",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="UserPreference",
            fields=[
                ("created_timestamp", models.DateTimeField(auto_now_add=True)),
                ("updated_timestamp", models.DateTimeField(auto_now=True)),
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                (
                    "food_external_id",
                    models.UUIDField(
                        blank=True,
                        help_text="External food ID for the food.",
                        null=True,
                        verbose_name="food_external_id",
                    ),
                ),
                (
                    "food_category_id",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Id of the food category the food belongs to.",
                        null=True,
                        verbose_name="food_category_id",
                    ),
                ),
                (
                    "food_nutrient_id",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="ID of the nutrient to which the food nutrient pertains.",
                        null=True,
                        verbose_name="food_nutrient_id",
                    ),
                ),
                (
                    "flags",
                    bitfield.models.BitField(
                        ("is_not_allowed", "is_available", "is_not_repeatable", "is_not_zeroable"), default=None
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User that owns the row.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="owner user",
                    ),
                ),
            ],
            options={
                "db_table": "ut_user_preference",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="USDABrandedFood",
            fields=[
                ("created_timestamp", models.DateTimeField(auto_now_add=True)),
                ("updated_timestamp", models.DateTimeField(auto_now=True)),
                (
                    "usda_food",
                    models.OneToOneField(
                        help_text="USDA Food for this branded food.",
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to="nutrition_tracker.usdafood",
                        verbose_name="usda_food",
                    ),
                ),
                (
                    "brand_owner",
                    models.TextField(
                        blank=True, help_text="Brand owner for the food.", null=True, verbose_name="brand_owner"
                    ),
                ),
                (
                    "brand_name",
                    models.TextField(
                        blank=True, help_text="Brand name for the food.", null=True, verbose_name="brand_name"
                    ),
                ),
                (
                    "subbrand_name",
                    models.TextField(
                        blank=True, help_text="Sub-brand name for the food.", null=True, verbose_name="subbrand_name"
                    ),
                ),
                (
                    "gtin_upc",
                    models.CharField(
                        blank=True,
                        help_text="GTIN or UPC code identifying the food.Duplicate codes signify an update to the product,use the publication_date found in the food tableto distinguish when each update was published, e.g.the latest publication date will be the most recentupdate of the product.",
                        max_length=20,
                        null=True,
                        verbose_name="gtin_upc",
                    ),
                ),
                (
                    "ingredients",
                    models.TextField(
                        blank=True,
                        help_text="The list of ingredients (as it appears on the product label).",
                        null=True,
                        verbose_name="ingredients",
                    ),
                ),
                (
                    "not_a_significant_source_of",
                    models.TextField(blank=True, null=True, verbose_name="not_a_significant_source_of"),
                ),
                (
                    "serving_size",
                    models.FloatField(
                        blank=True,
                        help_text="The amount of the serving size when expressed as gram or ml.",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0.0)],
                        verbose_name="serving_size",
                    ),
                ),
                (
                    "serving_size_unit",
                    models.CharField(
                        blank=True,
                        help_text="The unit used to express the serving size (gram or ml).",
                        max_length=25,
                        null=True,
                        verbose_name="serving_size_unit",
                    ),
                ),
                (
                    "household_serving_fulltext",
                    models.TextField(
                        blank=True,
                        help_text="Amount and unit of serving size when expressed in household units.",
                        null=True,
                        verbose_name="household_serving_fulltext",
                    ),
                ),
                (
                    "branded_food_category",
                    models.TextField(
                        blank=True,
                        help_text="The category of the branded food, assigned by GDSN or Label Insight.",
                        null=True,
                        verbose_name="branded_food_category",
                    ),
                ),
                (
                    "data_source",
                    models.CharField(
                        blank=True,
                        help_text="The source of the data for this food.GDSN (for GS1) or LI (for Label Insight).",
                        max_length=20,
                        null=True,
                        verbose_name="data_source",
                    ),
                ),
                (
                    "modified_date",
                    models.DateField(
                        blank=True,
                        help_text="This date reflects when the product data was last modifiedby the data provider, i.e., the manufacturer.",
                        null=True,
                        verbose_name="modified_date",
                    ),
                ),
                (
                    "available_date",
                    models.DateField(
                        blank=True,
                        help_text="This is the date when the product record was availablefor inclusion in the database.",
                        null=True,
                        verbose_name="available_date",
                    ),
                ),
                (
                    "market_country",
                    models.TextField(
                        blank=True,
                        help_text="The primary country where the product is marketed.",
                        null=True,
                        verbose_name="market_country",
                    ),
                ),
                (
                    "discontinued_date",
                    models.DateField(
                        blank=True,
                        help_text="This is the date when the product was discontinued.",
                        null=True,
                        verbose_name="discontinued_date",
                    ),
                ),
            ],
            options={
                "db_table": "usda_branded_food",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="USDAFnddsFood",
            fields=[
                ("created_timestamp", models.DateTimeField(auto_now_add=True)),
                ("updated_timestamp", models.DateTimeField(auto_now=True)),
                (
                    "usda_food",
                    models.OneToOneField(
                        help_text="USDA Food for this branded food.",
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to="nutrition_tracker.usdafood",
                        verbose_name="usda_food",
                    ),
                ),
                (
                    "food_code",
                    models.PositiveBigIntegerField(
                        blank=True,
                        help_text="A unique ID identifying the food within FNDDS.",
                        null=True,
                        verbose_name="food_code",
                    ),
                ),
                (
                    "wweia_category_number",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Unique Identification number for WWEIA food category to which this food is assigned.",
                        null=True,
                        verbose_name="wweia_category_number",
                    ),
                ),
                (
                    "start_date",
                    models.DateField(
                        blank=True,
                        help_text="Start date indicates time period corresponding to WWEIA data.",
                        null=True,
                        verbose_name="start_date",
                    ),
                ),
                (
                    "end_date",
                    models.DateField(
                        blank=True,
                        help_text="End date indicates time period corresponding to WWEIA data.",
                        null=True,
                        verbose_name="end_date",
                    ),
                ),
            ],
            options={
                "db_table": "usda_fndds_food",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="USDAFoundationFood",
            fields=[
                ("created_timestamp", models.DateTimeField(auto_now_add=True)),
                ("updated_timestamp", models.DateTimeField(auto_now=True)),
                (
                    "usda_food",
                    models.OneToOneField(
                        help_text="USDA Food for this branded food.",
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to="nutrition_tracker.usdafood",
                        verbose_name="usda_food",
                    ),
                ),
                (
                    "ndb_number",
                    models.CharField(
                        blank=True,
                        help_text="Unique number assigned for the food, different from fdc_id, assigned in SR.",
                        max_length=50,
                        null=True,
                        verbose_name="ndb_number",
                    ),
                ),
                (
                    "footnote",
                    models.TextField(
                        blank=True,
                        help_text="Comments on any unusual aspects. These are released to the public.Examples might include unusual aspects of the food overall.",
                        null=True,
                        verbose_name="footnote",
                    ),
                ),
            ],
            options={
                "db_table": "usda_foundation_food",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="USDASRLegacy",
            fields=[
                ("created_timestamp", models.DateTimeField(auto_now_add=True)),
                ("updated_timestamp", models.DateTimeField(auto_now=True)),
                (
                    "usda_food",
                    models.OneToOneField(
                        help_text="USDA Food for this branded food.",
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to="nutrition_tracker.usdafood",
                        verbose_name="usda_food",
                    ),
                ),
                (
                    "ndb_number",
                    models.CharField(
                        blank=True,
                        help_text="Unique number assigned for the food, different from fdc_id, assigned in SR.",
                        max_length=50,
                        null=True,
                        verbose_name="ndb_number",
                    ),
                ),
            ],
            options={
                "db_table": "usda_sr_legacy",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="UserRecipe",
            fields=[
                ("created_timestamp", models.DateTimeField(auto_now_add=True)),
                ("updated_timestamp", models.DateTimeField(auto_now=True)),
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                (
                    "external_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="External UUID for the object.",
                        unique=True,
                        verbose_name="external_id",
                    ),
                ),
                (
                    "name",
                    models.TextField(blank=True, help_text="Name of the object.", null=True, verbose_name="name"),
                ),
                (
                    "recipe_date",
                    models.DateField(
                        blank=True,
                        default=datetime.date.today,
                        help_text="Date when the recipe was available.",
                        null=True,
                        verbose_name="recipe_date",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User that owns the row.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="owner user",
                    ),
                ),
            ],
            options={
                "db_table": "ut_user_recipe",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="UserPreferenceThreshold",
            fields=[
                ("created_timestamp", models.DateTimeField(auto_now_add=True)),
                ("updated_timestamp", models.DateTimeField(auto_now=True)),
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                (
                    "dimension",
                    models.PositiveSmallIntegerField(
                        choices=[(1, "Apply preference for quantity."), (2, "Apply preference on count.")],
                        default=1,
                        help_text="Preference threshold applied to quantity or count dimension.",
                        verbose_name="dimension",
                    ),
                ),
                (
                    "num_days",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        default=1,
                        help_text="Number of days the preference threshold is applicable to.",
                        null=True,
                        verbose_name="num_days",
                    ),
                ),
                (
                    "min_value",
                    models.FloatField(
                        blank=True,
                        help_text="The minimum value for the preference threshold.",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0.0)],
                        verbose_name="min_value",
                    ),
                ),
                (
                    "max_value",
                    models.FloatField(
                        blank=True,
                        help_text="The maximum value for the preference threshold.",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0.0)],
                        verbose_name="max_value",
                    ),
                ),
                (
                    "exact_value",
                    models.FloatField(
                        blank=True,
                        help_text="The exact value for the preference threshold.",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0.0)],
                        verbose_name="exact_value",
                    ),
                ),
                (
                    "expansion_set",
                    models.PositiveIntegerField(
                        blank=True,
                        choices=[
                            (1, "Apply preference to self."),
                            (2, "Apply preference to members, only applicable to categories."),
                        ],
                        default=1,
                        help_text="Apply the preference threshold to self or group members.",
                        null=True,
                        verbose_name="expansion_set",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User that owns the row.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="owner user",
                    ),
                ),
                (
                    "user_preference",
                    models.ForeignKey(
                        help_text="User Preference parent object.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="nutrition_tracker.userpreference",
                        verbose_name="user preference",
                    ),
                ),
            ],
            options={
                "db_table": "ut_user_preference_threshold",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="UserMeal",
            fields=[
                ("created_timestamp", models.DateTimeField(auto_now_add=True)),
                ("updated_timestamp", models.DateTimeField(auto_now=True)),
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                (
                    "external_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="External UUID for the object.",
                        unique=True,
                        verbose_name="external_id",
                    ),
                ),
                (
                    "name",
                    models.TextField(blank=True, help_text="Name of the object.", null=True, verbose_name="name"),
                ),
                (
                    "meal_date",
                    models.DateField(
                        blank=True,
                        default=datetime.date.today,
                        help_text="Date when the meal was logged.",
                        null=True,
                        verbose_name="meal_date",
                    ),
                ),
                (
                    "meal_type",
                    models.CharField(
                        blank=True, help_text="Type of meal.", max_length=50, null=True, verbose_name="meal type"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User that owns the row.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="owner user",
                    ),
                ),
            ],
            options={
                "db_table": "ut_user_meal",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="UserIngredient",
            fields=[
                ("created_timestamp", models.DateTimeField(auto_now_add=True)),
                ("updated_timestamp", models.DateTimeField(auto_now=True)),
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                (
                    "external_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="External UUID for the object.",
                        unique=True,
                        verbose_name="external_id",
                    ),
                ),
                (
                    "name",
                    models.TextField(blank=True, help_text="Name of the object.", null=True, verbose_name="name"),
                ),
                (
                    "category_id",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Id of the food category the food belongs to.",
                        null=True,
                        verbose_name="food_category_id",
                    ),
                ),
                (
                    "db_food",
                    models.ForeignKey(
                        help_text="DB Food for this ingredient",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="nutrition_tracker.dbfood",
                        verbose_name="db_food",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User that owns the row.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="owner user",
                    ),
                ),
            ],
            options={
                "db_table": "ut_user_ingredient",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="UserFoodPortion",
            fields=[
                ("created_timestamp", models.DateTimeField(auto_now_add=True)),
                ("updated_timestamp", models.DateTimeField(auto_now=True)),
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                (
                    "object_id",
                    models.PositiveBigIntegerField(
                        help_text="Unique permanent identifier of the referenced object.", verbose_name="object_id"
                    ),
                ),
                (
                    "servings_per_container",
                    models.FloatField(
                        blank=True,
                        help_text="The number of servings per container.",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0.0)],
                        verbose_name="servings_per_container",
                    ),
                ),
                (
                    "serving_size",
                    models.FloatField(
                        blank=True,
                        help_text="The amount of the serving size when expressed as gram or ml.",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0.0)],
                        verbose_name="serving_size",
                    ),
                ),
                (
                    "serving_size_unit",
                    models.CharField(
                        blank=True,
                        help_text="The unit used to express the serving size (gram or ml).",
                        max_length=25,
                        null=True,
                        verbose_name="serving_size_unit",
                    ),
                ),
                (
                    "quantity",
                    models.FloatField(
                        blank=True,
                        help_text="The quantity of portions used as specified by the user.",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0.0)],
                        verbose_name="quantity",
                    ),
                ),
                (
                    "amount",
                    models.FloatField(
                        blank=True,
                        help_text="The number of measure units that comprise the measure (e.g. if measure is 3 tsp, the amount is 3).",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0.0)],
                        verbose_name="amount",
                    ),
                ),
                (
                    "measure_unit_id",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="The unit used for the measure (e.g. if measure is 3 tsp, the unit is tsp).",
                        null=True,
                        verbose_name="measure_unit_id",
                    ),
                ),
                (
                    "portion_description",
                    models.TextField(
                        blank=True,
                        help_text="Foundation foods: Comments that provide more specificity on the measure. For example, for a pizza measure the dissemination text might be 1 slice is 1/8th of a 14 inch pizza. Survey (FNDDS) foods: The household description of the portion.",
                        null=True,
                        verbose_name="portion_description",
                    ),
                ),
                (
                    "modifier",
                    models.TextField(
                        blank=True,
                        help_text='Foundation foods: Qualifier of the measure (e.g. related to food shape or form) (e.g. melted, crushed, diced). Survey (FNDDS) foods: The portion code. SR legacy foods: description of measures, including the unit of measure and the measure modifier (e.g. waffle round (4" dia)).',
                        null=True,
                        verbose_name="modifier",
                    ),
                ),
                (
                    "content_type",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="contenttypes.contenttype"),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User that owns the row.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="owner user",
                    ),
                ),
            ],
            options={
                "db_table": "ut_user_food_portion",
                "ordering": ["id"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="UserFoodNutrient",
            fields=[
                ("created_timestamp", models.DateTimeField(auto_now_add=True)),
                ("updated_timestamp", models.DateTimeField(auto_now=True)),
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                (
                    "nutrient_id",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="ID of the nutrient to which the food nutrient pertains.",
                        null=True,
                        verbose_name="nutrient_id",
                    ),
                ),
                (
                    "amount",
                    models.FloatField(
                        blank=True,
                        help_text="Amount of the nutrient per 100g of food. Specified in unit defined in the nutrient table.",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0.0)],
                        verbose_name="amount",
                    ),
                ),
                (
                    "ingredient",
                    models.ForeignKey(
                        help_text="Parent food for the nutrition information.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="nutrition_tracker.useringredient",
                        verbose_name="ingredient",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User that owns the row.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="owner user",
                    ),
                ),
            ],
            options={
                "db_table": "ut_user_food_nutrient",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="UserFoodMembership",
            fields=[
                ("created_timestamp", models.DateTimeField(auto_now_add=True)),
                ("updated_timestamp", models.DateTimeField(auto_now=True)),
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                (
                    "external_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="External UUID for the object.",
                        unique=True,
                        verbose_name="external_id",
                    ),
                ),
                (
                    "name",
                    models.TextField(blank=True, help_text="Name of the object.", null=True, verbose_name="name"),
                ),
                (
                    "parent_id",
                    models.PositiveBigIntegerField(
                        help_text="Unique permanent identifier of the parent object - meal, recipe, mealplan.",
                        verbose_name="parent_id",
                    ),
                ),
                (
                    "child_id",
                    models.PositiveBigIntegerField(
                        help_text="Unique permanent identifier of the child object - ingredient, recipe.",
                        verbose_name="child_id",
                    ),
                ),
                (
                    "child_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="child_type",
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "parent_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="parent_type",
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User that owns the row.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="owner user",
                    ),
                ),
            ],
            options={
                "db_table": "ut_user_food_membership",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="UserBrandedFood",
            fields=[
                ("created_timestamp", models.DateTimeField(auto_now_add=True)),
                ("updated_timestamp", models.DateTimeField(auto_now=True)),
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                (
                    "brand_owner",
                    models.TextField(
                        blank=True, help_text="Brand owner for the food.", null=True, verbose_name="brand_owner"
                    ),
                ),
                (
                    "brand_name",
                    models.TextField(
                        blank=True, help_text="Brand name for the food.", null=True, verbose_name="brand_name"
                    ),
                ),
                (
                    "subbrand_name",
                    models.TextField(
                        blank=True, help_text="Sub-brand name for the food.", null=True, verbose_name="subbrand_name"
                    ),
                ),
                (
                    "gtin_upc",
                    models.CharField(
                        blank=True,
                        help_text="GTIN or UPC code identifying the food.",
                        max_length=20,
                        null=True,
                        verbose_name="gtin_upc",
                    ),
                ),
                (
                    "ingredient",
                    models.ForeignKey(
                        help_text="Parent food for the brand information.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="nutrition_tracker.useringredient",
                        verbose_name="ingredient",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User that owns the row.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="owner user",
                    ),
                ),
            ],
            options={
                "db_table": "ut_user_branded_food",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="USDAFoodPortion",
            fields=[
                ("created_timestamp", models.DateTimeField(auto_now_add=True)),
                ("updated_timestamp", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.PositiveBigIntegerField(
                        help_text="ID for the USDA Food Portion row.",
                        primary_key=True,
                        serialize=False,
                        verbose_name="id",
                    ),
                ),
                (
                    "seq_num",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="The order the measure will be displayed on the released food.",
                        null=True,
                        verbose_name="seq_num",
                    ),
                ),
                (
                    "amount",
                    models.FloatField(
                        blank=True,
                        help_text="The number of measure units that comprise the measure (e.g. if measure is 3 tsp, the amount is 3). Not defined for survey (FNDDS) foods (amount is instead embedded in portion description).",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0.0)],
                        verbose_name="amount",
                    ),
                ),
                (
                    "measure_unit_id",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="The unit used for the measure (e.g. if measure is 3 tsp, the unit is tsp). For food types that do not use measure SR legacy foods and survey (FNDDS) foods), a value of '9999' is assigned to this field.",
                        null=True,
                        verbose_name="measure_unit_id",
                    ),
                ),
                (
                    "portion_description",
                    models.TextField(
                        blank=True,
                        help_text="Foundation foods: Comments that provide more specificity on the measure. For example, for a pizza measure the dissemination text might be 1 slice is 1/8th of a 14 inch pizza. Survey (FNDDS) foods: The household description of the portion.",
                        null=True,
                        verbose_name="portion_description",
                    ),
                ),
                (
                    "modifier",
                    models.TextField(
                        blank=True,
                        help_text='Foundation foods: Qualifier of the measure (e.g. related to food shape or form) (e.g. melted, crushed, diced). Survey (FNDDS) foods: The portion code. SR legacy foods: description of measures, including the unit of measure and the measure modifier (e.g. waffle round (4" dia)).',
                        null=True,
                        verbose_name="modifier",
                    ),
                ),
                (
                    "gram_weight",
                    models.FloatField(
                        blank=True,
                        help_text="The weight of the measure in grams.",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0.0)],
                        verbose_name="gram_weight",
                    ),
                ),
                (
                    "data_points",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="The number of observations on which the measure is based.",
                        null=True,
                        verbose_name="data_points",
                    ),
                ),
                (
                    "footnote",
                    models.TextField(
                        blank=True,
                        help_text="Comments on any unusual aspects of the measure. These are released to the public. Examples might include caveats on the usage of a measure, or reasons why a measure gram weight is an unexpected value.",
                        null=True,
                        verbose_name="footnote",
                    ),
                ),
                (
                    "min_year_acquired",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        help_text="Minimum purchase year of all acquisitions used to derive the measure value.",
                        null=True,
                        verbose_name="min_year_acquired",
                    ),
                ),
                (
                    "usda_food",
                    models.ForeignKey(
                        help_text="USDA Food for this food portion.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="nutrition_tracker.usdafood",
                        verbose_name="usda_food",
                    ),
                ),
            ],
            options={
                "db_table": "usda_food_portion",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="USDAFoodNutrient",
            fields=[
                ("created_timestamp", models.DateTimeField(auto_now_add=True)),
                ("updated_timestamp", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.PositiveBigIntegerField(
                        help_text="ID for the USDA Food Nutrient row.",
                        primary_key=True,
                        serialize=False,
                        verbose_name="id",
                    ),
                ),
                (
                    "nutrient_id",
                    models.PositiveIntegerField(
                        help_text="ID of the nutrient to which the food nutrient pertains.", verbose_name="nutrient_id"
                    ),
                ),
                (
                    "amount",
                    models.FloatField(
                        blank=True,
                        help_text="Amount of the nutrient per 100g of food. Specified in unit defined in the nutrient table.",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0.0)],
                        verbose_name="amount",
                    ),
                ),
                (
                    "data_points",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Number of observations on which the value is based.",
                        null=True,
                        verbose_name="data_points",
                    ),
                ),
                (
                    "derivation_id",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="ID of the food nutrient derivation technique used to derive the value.",
                        null=True,
                        verbose_name="derivation_id",
                    ),
                ),
                (
                    "min",
                    models.FloatField(
                        blank=True,
                        help_text="The minimum amount.",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0.0)],
                        verbose_name="min",
                    ),
                ),
                (
                    "max",
                    models.FloatField(
                        blank=True,
                        help_text="The maximum amount.",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0.0)],
                        verbose_name="max",
                    ),
                ),
                (
                    "median",
                    models.FloatField(
                        blank=True,
                        help_text="The median amount.",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0.0)],
                        verbose_name="median",
                    ),
                ),
                (
                    "footnote",
                    models.TextField(
                        blank=True,
                        help_text="Comments on any unusual aspects of the food nutrient. Examples might include why a nutrient value is different than typically expected.",
                        null=True,
                        verbose_name="footnote",
                    ),
                ),
                (
                    "min_year_acquired",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        help_text="Minimum purchase year of all acquisitions used to derive the nutrient value.",
                        null=True,
                        verbose_name="min_year_acquired",
                    ),
                ),
                (
                    "usda_food",
                    models.ForeignKey(
                        help_text="USDA Food for this food nutrient.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="nutrition_tracker.usdafood",
                        verbose_name="usda_food",
                    ),
                ),
            ],
            options={
                "db_table": "usda_food_nutrient",
                "abstract": False,
            },
        ),
        migrations.AddIndex(
            model_name="usdafood",
            index=models.Index(fields=["description", "data_type"], name="usda_food_description_type_idx"),
        ),
        migrations.AddIndex(
            model_name="searchresult",
            index=django.contrib.postgres.indexes.GinIndex(
                fields=["search_vector"], name="gt_search_i_search__40c7ee_gin"
            ),
        ),
        migrations.AddIndex(
            model_name="searchresult",
            index=models.Index(fields=["gtin_upc"], name="search_result_gtinupc_idx"),
        ),
        migrations.AddField(
            model_name="dbfoodportion",
            name="db_food",
            field=models.ForeignKey(
                help_text="DB Food for this food portion.",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="nutrition_tracker.dbfood",
                verbose_name="db_food",
            ),
        ),
        migrations.AddField(
            model_name="dbfoodnutrient",
            name="db_food",
            field=models.ForeignKey(
                help_text="DB Food for this food nutrient.",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="nutrition_tracker.dbfood",
                verbose_name="db_food",
            ),
        ),
        migrations.AddConstraint(
            model_name="dbfood",
            constraint=models.UniqueConstraint(
                fields=("source_id", "source_type"), name="nutrition_tracker_dbfood_one_per_source_id_type"
            ),
        ),
        migrations.AddField(
            model_name="dbbrandedfood",
            name="db_food",
            field=models.OneToOneField(
                help_text="DB Food for this branded food.",
                on_delete=django.db.models.deletion.CASCADE,
                to="nutrition_tracker.dbfood",
                verbose_name="db_food",
            ),
        ),
        migrations.AddConstraint(
            model_name="userpreference",
            constraint=models.UniqueConstraint(
                fields=("user_id", "food_external_id"),
                name="nutrition_tracker_userpreference_one_food_preference_per_user",
            ),
        ),
        migrations.AddConstraint(
            model_name="userpreference",
            constraint=models.UniqueConstraint(
                fields=("user_id", "food_category_id"),
                name="nutrition_tracker_userpreference_one_category_preference_per_user",
            ),
        ),
        migrations.AddConstraint(
            model_name="userpreference",
            constraint=models.UniqueConstraint(
                fields=("user_id", "food_nutrient_id"),
                name="nutrition_tracker_userpreference_one_nutrient_preference_per_user",
            ),
        ),
        migrations.AddConstraint(
            model_name="userpreference",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(
                        ("food_category_id__isnull", True),
                        ("food_external_id__isnull", False),
                        ("food_nutrient_id__isnull", True),
                    ),
                    models.Q(
                        ("food_category_id__isnull", False),
                        ("food_external_id__isnull", True),
                        ("food_nutrient_id__isnull", True),
                    ),
                    models.Q(
                        ("food_category_id__isnull", True),
                        ("food_external_id__isnull", True),
                        ("food_nutrient_id__isnull", False),
                    ),
                    _connector="OR",
                ),
                name="nutrition_tracker_userpreference_one_of_food_category_nutrient_set",
            ),
        ),
        migrations.AddIndex(
            model_name="usermeal",
            index=models.Index(fields=["user_id", "meal_date"], name="user_meal_user_mealdate_idx"),
        ),
        migrations.AddConstraint(
            model_name="usermeal",
            constraint=models.UniqueConstraint(
                fields=("user_id", "meal_type", "meal_date"),
                name="nutrition_tracker_usermeal_one_meal_type_and_date_per_user",
            ),
        ),
        migrations.AddConstraint(
            model_name="useringredient",
            constraint=models.UniqueConstraint(
                fields=("user_id", "db_food_id"), name="nutrition_tracker_useringredient_one_db_food_per_food_per_user"
            ),
        ),
        migrations.AddConstraint(
            model_name="userfoodnutrient",
            constraint=models.UniqueConstraint(
                fields=("user_id", "ingredient_id", "nutrient_id"),
                name="nutrition_tracker_userfoodnutrient_one_nutrient_per_food_per_user",
            ),
        ),
        migrations.AddIndex(
            model_name="userbrandedfood",
            index=models.Index(fields=["user_id", "gtin_upc"], name="user_branded_food_gtinupc_idx"),
        ),
        migrations.AddConstraint(
            model_name="userbrandedfood",
            constraint=models.UniqueConstraint(
                fields=("user_id", "ingredient_id"), name="nutrition_tracker_userbrandedfood_one_row_per_food_per_user"
            ),
        ),
        migrations.AddIndex(
            model_name="usdabrandedfood",
            index=models.Index(fields=["gtin_upc"], name="usda_branded_food_gtinupc_idx"),
        ),
        migrations.AddConstraint(
            model_name="dbfoodportion",
            constraint=models.UniqueConstraint(
                fields=("db_food", "source_id", "source_type"),
                name="nutrition_tracker_dbfoodportion_one_per_db_food_source_id_type",
            ),
        ),
        migrations.AddConstraint(
            model_name="dbfoodnutrient",
            constraint=models.UniqueConstraint(
                fields=("source_id", "source_type"), name="nutrition_tracker_dbfoodnutrient_one_per_source_id_type"
            ),
        ),
        migrations.AddIndex(
            model_name="dbbrandedfood",
            index=models.Index(fields=["gtin_upc"], name="db_branded_food_gtinupc_idx"),
        ),
    ]
